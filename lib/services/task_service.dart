import 'package:flutter/material.dart';
import 'package:hive_flutter/hive_flutter.dart';
import '../data/models/task_model.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
class TaskService extends ChangeNotifier {
  static const String _boxName = 'tasks';
  late Box<TaskModel> _taskBox;
  List<TaskModel> _tasks = [];
  
  /// –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á
  List<TaskModel> get allTasks => _tasks;
  
  /// –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
  List<TaskModel> get activeTasks => 
      _tasks.where((task) => task.isActive).toList();
  
  /// –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
  List<TaskModel> getTodayTasks() {
    return activeTasks
        .where((task) => task.shouldBeCompletedToday())
        .toList()
      ..sort((a, b) {
        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        if (a.priority != b.priority) {
          return b.priority.index.compareTo(a.priority.index);
        }
        // –ó–∞—Ç–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if (a.reminderTime != null && b.reminderTime != null) {
          return a.reminderTime!.compareTo(b.reminderTime!);
        }
        return 0;
      });
  }
  
  /// –°–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á
  List<TaskModel> getCompletedTodayTasks() {
    return _tasks.where((task) => task.isCompletedToday()).toList();
  }
  
  /// –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  Future<void> loadTasks() async {
    _taskBox = await Hive.openBox<TaskModel>(_boxName);
    _tasks = _taskBox.values.toList();
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏, –µ—Å–ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å
    _resetDailyTasks();
    
    notifyListeners();
  }
  
  /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
  Future<void> addTask(TaskModel task) async {
    await _taskBox.put(task.id, task);
    _tasks.add(task);
    notifyListeners();
  }
  
  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
  Future<void> updateTask(TaskModel task) async {
    final index = _tasks.indexWhere((t) => t.id == task.id);
    if (index != -1) {
      await _taskBox.put(task.id, task);
      _tasks[index] = task;
      notifyListeners();
    }
  }
  
  /// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
  Future<void> deleteTask(String taskId) async {
    await _taskBox.delete(taskId);
    _tasks.removeWhere((task) => task.id == taskId);
    notifyListeners();
  }
  
  /// –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
  Future<void> completeTask(TaskModel task) async {
    task.markAsCompleted();
    await updateTask(task);
  }
  
  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Å—Ç–∞—Ç—É)
  List<TaskModel> getTasksByStat(String statName) {
    return activeTasks
        .where((task) => task.affectedStat == statName)
        .toList();
  }
  
  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ —Ç–∏–ø—É
  List<TaskModel> getTasksByType(TaskType type) {
    return activeTasks
        .where((task) => task.type == type)
        .toList();
  }
  
  /// –°–±—Ä–æ—Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á
  void _resetDailyTasks() {
    final now = DateTime.now();
    
    for (var task in _tasks) {
      if (task.type == TaskType.daily || task.type == TaskType.weekly) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –∑–∞–¥–∞—á—É
        if (task.lastCompletedAt != null) {
          final lastCompleted = task.lastCompletedAt!;
          
          // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±—ã–ª–æ –Ω–µ —Å–µ–≥–æ–¥–Ω—è
          if (lastCompleted.day != now.day ||
              lastCompleted.month != now.month ||
              lastCompleted.year != now.year) {
            task.resetCompletion();
            _taskBox.put(task.id, task);
          }
        }
      }
    }
  }
  
  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∑–∞–¥–∞—á–∞–º
  Map<String, dynamic> getTasksStatistics() {
    final totalTasks = _tasks.length;
    final completedToday = getCompletedTodayTasks().length;
    final pendingToday = getTodayTasks().where((t) => !t.isCompleted).length;
    
    // –ü–æ–¥—Å—á–µ—Ç –ø–æ —Ç–∏–ø–∞–º
    final dailyCount = getTasksByType(TaskType.daily).length;
    final weeklyCount = getTasksByType(TaskType.weekly).length;
    final customCount = getTasksByType(TaskType.custom).length;
    final habitCount = getTasksByType(TaskType.habit).length;
    
    // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
    final totalCompletions = _tasks.fold<int>(
      0,
      (sum, task) => sum + task.completionCount,
    );
    
    return {
      'total': totalTasks,
      'completedToday': completedToday,
      'pendingToday': pendingToday,
      'daily': dailyCount,
      'weekly': weeklyCount,
      'custom': customCount,
      'habit': habitCount,
      'totalCompletions': totalCompletions,
    };
  }
  
  /// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –∑–∞–¥–∞—á –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> createSampleTasks() async {
    final sampleTasks = [
      TaskModel(
        id: DateTime.now().millisecondsSinceEpoch.toString(),
        title: '–£—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞',
        description: '–°–¥–µ–ª–∞—Ç—å 10-–º–∏–Ω—É—Ç–Ω—É—é —Ä–∞–∑–º–∏–Ω–∫—É',
        type: TaskType.daily,
        priority: TaskPriority.high,
        affectedStat: 'sport',
        expReward: 15,
        coinReward: 10,
        createdAt: DateTime.now(),
        icon: 'üèÉ',
        reminderTime: '07:00',
      ),
      TaskModel(
        id: '${DateTime.now().millisecondsSinceEpoch + 1}',
        title: '–í—ã–ø–∏—Ç—å 2 –ª–∏—Ç—Ä–∞ –≤–æ–¥—ã',
        description: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å',
        type: TaskType.daily,
        priority: TaskPriority.medium,
        affectedStat: 'health',
        expReward: 10,
        coinReward: 5,
        createdAt: DateTime.now(),
        icon: 'üíß',
      ),
      TaskModel(
        id: '${DateTime.now().millisecondsSinceEpoch + 2}',
        title: '–ß—Ç–µ–Ω–∏–µ –∫–Ω–∏–≥–∏',
        description: '–ü—Ä–æ—á–∏—Ç–∞—Ç—å –º–∏–Ω–∏–º—É–º 20 —Å—Ç—Ä–∞–Ω–∏—Ü',
        type: TaskType.daily,
        priority: TaskPriority.medium,
        affectedStat: 'education',
        expReward: 20,
        coinReward: 15,
        createdAt: DateTime.now(),
        icon: 'üìö',
        reminderTime: '20:00',
      ),
      TaskModel(
        id: '${DateTime.now().millisecondsSinceEpoch + 3}',
        title: '–í—Å—Ç—Ä–µ—á–∞ —Å –¥—Ä—É–∑—å—è–º–∏',
        description: '–ü—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è —Å –±–ª–∏–∑–∫–∏–º–∏',
        type: TaskType.weekly,
        priority: TaskPriority.medium,
        affectedStat: 'social',
        expReward: 30,
        coinReward: 20,
        createdAt: DateTime.now(),
        weekDays: [5, 6], // –ü—è—Ç–Ω–∏—Ü–∞ –∏ —Å—É–±–±–æ—Ç–∞
        icon: 'üë•',
      ),
      TaskModel(
        id: '${DateTime.now().millisecondsSinceEpoch + 4}',
        title: '–ú–µ–¥–∏—Ç–∞—Ü–∏—è',
        description: '–ü—Ä–∞–∫—Ç–∏–∫–∞ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏',
        type: TaskType.habit,
        priority: TaskPriority.low,
        affectedStat: 'spirituality',
        expReward: 10,
        coinReward: 5,
        createdAt: DateTime.now(),
        icon: 'üßò',
        difficulty: 2,
      ),
    ];
    
    for (var task in sampleTasks) {
      await addTask(task);
    }
  }
}